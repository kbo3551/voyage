<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gdu.voyage.mapper.AccomBuildingMapper">

	<!-- 사업자 -->
	<!-- 숙소-건물 입력 : selectKey를 사용하여 숙소건물의 식별번호를 받아온뒤 나머지 추가 정보들도 함께 insert -->
	<insert id="insertAccomBuilding" parameterType="com.gdu.voyage.vo.AccomBuilding">
		INSERT INTO accom_building (
			host_no,
			accom_building_name,
			accom_building_description,
			accom_building_phone,
			create_date,
			update_date
		) VALUES (
			'3',
			#{accomBuildingName},
			#{accomBuildingDescription},
			#{accomBuildingPhone},
			NOW(),
			NOW()
		)
		<selectKey keyProperty="accomBuildingNo" order="AFTER" resultType="int">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>
	
	<!-- 숙소-건물의 이미지 파일 입력 -->
	<insert id="insertAccomBuildingImage" parameterType="com.gdu.voyage.vo.AccomBuildingImage">
		INSERT INTO accom_building_image (
			accom_building_no,
			accom_building_image_name,
			accom_building_image_ext,
			accom_building_image_size
		) VALUES (
			#{accomBuildingNo},
			#{accomBuildingImageName},
			#{accomBuildingImageExt},
			#{accomBuildingImageSize}
		)
	</insert>
	
	<!-- 숙소-건물의 주소 입력 -->
	<insert id="insertAccomBuildingAddress" parameterType="com.gdu.voyage.vo.AccomAddress">
		INSERT INTO accom_address (
			accom_building_no,
			accom_address_postal_code,
			accom_address_zip,
			accom_address_detail,
			create_date,
			update_date
		) VALUES (
			#{accomBuildingNo},
			#{accomAddressPotalCode},
			#{accomAddressZip},
			#{accomAddressDetail},
			NOW(),
			NOW()
		)
	</insert>
	
	<!-- 숙소-건물의 시설 입력 -->
	<insert id="insertAccomBuildingFacility" parameterType="com.gdu.voyage.vo.AccomBuildingFacility">
		INSERT INTO accom_building_facility (
			accom_building_no,
			accom_building_facility_name
		) VALUES (
			#{accomBuildingNo},
			#{accomBuildingFacilityName}
		)
	</insert>
	
	<!-- 숙소-건물의 추천장소 입력 -->
	<insert id="insertAccomBuildingSpot" parameterType="com.gdu.voyage.vo.AccomBuildingSpot">
		INSERT INTO accom_building_spot (
			accom_building_no,
			accom_building_spot_name,
			accom_building_spot_category,
			accom_building_spot_description
		) VALUES (
			#{accomBuildingNo},
			#{accomBuildingSpotName},
			#{accomBuildingSpotCategory},
			#{accomBuildingSpotDescription}
		)
		<selectKey keyProperty="accomBuildingSpotNo" order="AFTER" resultType="int">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>
	
	<!-- 숙소-건물, 추천장소의 주소 입력 -->
	<insert id="insertAccomSpotAddress" parameterType="com.gdu.voyage.vo.SpotAddress">
		INSERT INTO spot_address (
			spot_table,
			spot_no,
			spot_address_postal_code,
			spot_address_zip,
			spot_adress_detail,
			create_date,
			update_date
		) VALUES (
			'건물',
			#{spotNo},
			#{spotAddressPotalCode},
			#{spotAddressZip},
			#{spotAddressDetail},
			NOW(),
			NOW()
		)
	</insert>
	
	<!-- 숙소-건물의 해시태그 입력 -->
	<insert id="insertAccomBuildingHashtag" parameterType="com.gdu.voyage.vo.Hashtag">
		INSERT INTO hashtag (
			iden_no,
			table_name,
			hashtag,
			create_date
		) VALUES (
			#{idenNo},
			#{tableName},
			#{hashtag},
			NOW()
		)
	</insert>
	
	
	<!-- 관리자, 사업자 -->
	<!-- 숙소 목록 출력 -->
	<select id="selectAccomBuildingList" resultType="com.gdu.voyage.vo.AccomBuilding">
        SELECT
            accom_building_no as accomBuildingNo,
            accom_building_name as accomBuildingName,
            accom_building_description as accomBuildingDescription,
            accom_building_phone as accomBuildingPhone,
            accom_building_state as accomBuildingState,
            accom_building_state_admin as accomBuildingStateAdmin,
            create_date as createDate,
            update_date as updateDate
        FROM
        	accom_building
        <if test="hostNo != null">
        	<where>
        		host_no = #{hostNo}
            	AND
            	NOT accom_building_state_admin = "승인대기"
            	AND
            	NOT accom_building_state_admin = "삭제"
        	</where>
        	ORDER BY
        		accom_building_name ASC
        </if>
        LIMIT 
      		#{beginRow}, #{rowPerPage}
    </select>
    
   <!-- 페이징 -->
	<select id="selectCountPage" resultType="int"  parameterType="com.gdu.voyage.vo.AccomBuilding">
		SELECT
			COUNT(*)
		FROM 
			accom_building
		<if test="hostNo != null">
			<where>
				host_no = #{hostNo}
				AND
				NOT accom_building_state_admin = "승인대기"
            	AND
				NOT accom_building_state_admin = "삭제"
			</where>
		</if>
	</select>
    
    <!-- 사업자 -->
	<!-- host_no에 따른 대기중인 숙소 신청 리스트 -->
	<select id="selectReqAccomBuildingListByHost" resultType="com.gdu.voyage.vo.AccomBuilding">
            SELECT
            	accom_building_no accomBuildingNo,
            	accom_building_name accomBuildingName,
            	accom_building_state_admin accomBuildingStateAdmin,
            	create_date createDate
            FROM
            	accom_building
            WHERE
            	host_no = #{hostNo}
            	AND
            	NOT accom_building_state_admin = "승인완료"
            	AND
            	NOT accom_building_state_admin = "점검"
			ORDER BY
				accom_building_name ASC
    </select>
    
    <!-- 사업자 -->
	<!-- host_no에 따른 대기중인 숙소 신청 갯수 -->
	<select id="selectReqAccomBuildingCountByHost" resultType="int">
            SELECT
            	COUNT(*)
            FROM
            	accom_building
            WHERE
            	host_no = #{hostNo}
            	AND
            	NOT accom_building_state_admin = "승인완료"
            	AND
            	NOT accom_building_state_admin = "점검"
    </select>

    <!-- 건물번호에따른 숙소 상세 목록 출력 -->
    <select id="selectAccomBuildingOne" resultType="com.gdu.voyage.vo.AccomBuilding">
            SELECT
            	accom_building_no as accomBuildingNo,
	            host_no as hostNo,
	            accom_building_name as accomBuildingName,
	            accom_building_description as accomBuildingDescription,
	            accom_building_phone as accomBuildingPhone,
	            accom_building_state as accomBuildingState,
	            accom_building_state_admin as accomBuildingStateAdmin,
	            create_date as createDate,
	            update_date as updateDate
			FROM 
				accom_building
            WHERE 
            	accom_building_no = #{accom_building_no}
    </select>
    
    <!-- 등록된 숙소 승인여부 수정 -->
    <update id="accomBuildingUpdate" parameterType="com.gdu.voyage.vo.AccomBuilding">
    	UPDATE accom_building SET
    		accom_building_state = #{accomBuildingState},
    		accom_building_state_admin = #{accomBuildingStateAdmin},
    		update_date = NOW()
    	WHERE 
    		accom_building_no = #{accomBuildingNo}
    </update>
    
    <!-- 관리자 -->
	<!-- 승인완료된 숙소 목록 출력 -->
	<select id="selectAccessAccomBuilding" resultType="com.gdu.voyage.vo.AccomBuilding">
            SELECT
	            accom_building_no as accomBuildingNo,
	            host_no as hostNo,
	            accom_building_name as accomBuildingName,
	            accom_building_description as accomBuildingDescription,
	            accom_building_phone as accomBuildingPhone,
	            accom_building_state as accomBuildingState,
	            accom_building_state_admin as accomBuildingStateAdmin,
	            create_date as createDate,
	            update_date as updateDate
			FROM 
				accom_building
            WHERE 
            	accom_building_state_admin = '승인완료'
    </select>
    
    <!-- 삭제 요청 처리. 마지막 체크인 날짜로부터 일주일이 되면 삭제 처리 -->
	<update id="updateDormantAccomBuilding">
		UPDATE accom_building
		SET
			accom_building_state_admin = "삭제"
		WHERE
			DATEDIFF(DAY,NOW(),) >= 7
	</update>
</mapper>