<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gdu.voyage.mapper.ActivityMapper">
	<resultMap type="com.gdu.voyage.vo.Activity" id="Activity">
		<result column="activity_no" property="activityNo" />
		<result column="host_no" property="hostNo" />
		<result column="activity_name" property="activityName" />
		<result column="activity_open_date" property="activityOpenDate" />
		<result column="activity_close_date" property="activityCloseDate" />
		<result column="activity_price" property="activityPrice" />
		<result column="activity_open_hour" property="activityOpenHour" />
		<result column="activity_close_hour" property="activityCloseHour" />
		<result column="activity_max_t" property="activityMaxT" />
		<result column="activity_max_p" property="activityMaxP" />
		<result column="activity_description" property="activityDescription" />
		<result column="activity_phone" property="activityPhone" />
		<result column="activity_state" property="activityState" />
		<result column="activity_state_admin" property="activityStateAdmin" />
		<result column="create_date" property="createDate" />
		<result column="update_date" property="updateDate" />
		<collection property="activityImage" resultMap="ActivityImage" />
	</resultMap>
	
	<resultMap type="com.gdu.voyage.vo.ActivityImage" id="ActivityImage">
		<result column="activity_no" property="activityImageNo" />
		<result column="activity_image_name" property="activityImageName" />
		<result column="activity_image_ext" property="activityImageExt" />
		<result column="activity_image_size" property="activityImageSize" />
	</resultMap>

	<!-- 사업자 -->
    <!-- 체험 입력 : selectKey를 사용하여 체험의 식별번호를 받아온뒤 나머지 추가 정보들도 함께 insert  -->
    <insert id="insertActivity" parameterType="com.gdu.voyage.vo.Activity">
		INSERT INTO activity (
			host_no,
			activity_name,
			activity_open_date,
			activity_close_date,
			activity_price,
			activity_open_hour,
			activity_close_hour,
			activity_max_t,
			activity_max_p,
			activity_description,
			create_date,
			update_date
		) VALUES (
			'3',
			#{activityName},
			#{activityOpenDate},
			#{activityCloseDate},
			#{activityPrice},
			#{activityOpenHour},
			#{activityCloseHour},
			#{activityMaxT},
			#{activityMaxP},
			#{activityDescription},
			NOW(),
			NOW()
		)
		<selectKey keyProperty="activityNo" order="AFTER" resultType="int">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>
	
	<!-- 체험의 이미지 파일 입력 -->
	<insert id="insertActivityImage" parameterType="com.gdu.voyage.vo.ActivityImage">
		INSERT INTO activity_image(
			activity_no,
			activity_image_name,
			activity_image_ext,
			activity_image_size
		) VALUES (
			#{activityNo},
			#{activityImageName},
			#{activityImageExt},
			#{activityImageSize}
		)
	</insert>
	
	<!-- 체험의 주소 입력 -->
	<insert id="insertActivityAddress" parameterType="com.gdu.voyage.vo.ActivityAddress">
		INSERT INTO activity_address (
			activity_no,
			activity_address_postal_code,
			activity_address_zip,
			activity_address_detail,
			create_date,
			update_date
		) VALUES (
			#{activityNo},
			#{activityAddressPostalCode},
			#{activityAddressZip},
			#{activityAddressDetail},
			NOW(),
			NOW()
		)
	</insert>
	
	<!-- 체험의 추천 장소 입력 -->
	<insert id="insertActivitySpot" parameterType="com.gdu.voyage.vo.ActivitySpot">
		INSERT INTO activity_spot (
			activity_no,
			activity_spot_name,
			activity_spot_category,
			activity_spot_description
		) VALUES (
			#{activityNo},
			#{activitySpotName},
			#{activitySpotCategory},
			#{activitySpotDescription}
		)
		<selectKey keyProperty="activitySpotNo" order="AFTER" resultType="int">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>
	
	<!-- 체험 추천장소의 주소 입력 -->
	<insert id="insertActivitySpotAddress" parameterType="com.gdu.voyage.vo.SpotAddress">
		INSERT INTO spot_address (
			spot_table,
			spot_no,
			spot_address_postal_code,
			spot_address_zip,
			spot_adress_detail,
			create_date,
			update_date
		) VALUES (
			'체험',
			#{spotNo},
			#{spotAddressPotalCode},
			#{spotAddressZip},
			#{spotAddressDetail},
			NOW(),
			NOW()
		)
	</insert>
	
	<!-- 체험의 해시태그 입력 -->
	<insert id="insertActivityHashtag" parameterType="com.gdu.voyage.vo.Hashtag">
		INSERT INTO hashtag (
			iden_no,
			table_name,
			hashtag,
			create_date
		) VALUES (
			#{idenNo},
			#{tableName},
			#{hashtag},
			NOW()
		)
	</insert>
	
	<!-- 회원 -->
	<!-- 이미지가 포함된 관심상품목록 -->
	<select id="selectActivityByInterest" resultMap="Activity">
		SELECT
			a.activity_name,
			a.activity_description,
			a.activity_phone,
			a.activity_state,
			aim.activity_image_name,
			aim.activity_image_ext
		FROM
			activity_interest ai
		INNER JOIN
			activity a
		ON
			a.activity_no = ai.activity_no
		INNER JOIN
			activity_image aim
		ON
			aim.activity_no = ai.activity_no
		WHERE
			ai.member_id = #{memberId}
			AND 
			a.activity_state = '공개'
			AND
			aim.activity_image_name =
			(SELECT activity_image_name
			FROM activity_image
			WHERE activity_no = ai.activity_no
			ORDER BY activity_image_no ASC
			LIMIT 0,1
			)
			AND
			aim.activity_image_ext =
			(SELECT activity_image_ext
			FROM activity_image
			WHERE activity_no = ai.activity_no
			ORDER BY activity_image_no ASC
			LIMIT 0,1
			)
		ORDER BY
			ai.activity_interest_no desc
		LIMIT
			#{beginRow}, #{rowPerPage}
	</select>
	<!-- 관심상품 페이징 -->
	<select id="selectInterestedActivityCount" resultType="int">
		SELECT
			COUNT(*)
		FROM 
			activity_interest
		WHERE
			member_id = #{memberId}
	</select>
	
	
	
	<!-- 사업자별 대기중인 체험 신청 리스트 -->
	<select id="selectReqActivityListByHost" resultType="com.gdu.voyage.vo.Activity">
		SELECT
			activity_no activityNo,
			activity_name activityName,
			activity_state_admin activityStateAdmin,
			create_date createDate
		FROM
			activity
		WHERE
			host_no = #{hostNo}
			AND
			NOT activity_state_admin = "승인완료"
			AND
			NOT activity_state_admin = "점검"
			AND
            NOT activity_state_admin = "삭제대기"
		ORDER BY
			create_date DESC
		LIMIT 
      		#{beginRow}, #{rowPerPage}
	</select>
	
	<!-- 사업자별 따른 대기중인 체험 신청 갯수 -->
	<select id="selectReqActivityCountByHost" resultType="int">
            SELECT
            	COUNT(*)
            FROM
            	activity
            WHERE
            	host_no = #{hostNo}
            	AND
            	NOT activity_state_admin = "승인완료"
				AND
				NOT activity_state_admin = "점검"
				AND
            	NOT activity_state_admin = "삭제대기"
    </select>
	

	
	<!-- 관리자, 사업자 -->
	<!-- 등록된 체험을 불러옴 list -->
	<select id="selectActivityList" resultType="com.gdu.voyage.vo.Activity">
            SELECT 
	            activity_no as activityNo,
	            activity_name as activityName,
	            activity_open_date as activityOpenDate,
	            activity_close_date as activityCloseDate,
	            activity_description as activityDescription,
	            activity_state as activityState,
	            create_date as createDate,
	            update_date as updateDate
            FROM 
            	activity
            <if test="hostNo != null">
        	<where>
        		host_no = #{hostNo}
				AND
				NOT activity_state_admin = "승인대기"
				AND
				NOT activity_state_admin = "삭제"
        	</where>
        	ORDER BY
        		activity_name ASC
        </if>
            LIMIT 
      			#{beginRow}, #{rowPerPage}
    </select>
    
    <!-- 페이징 -->
	<select id="selectCountPage" resultType="int"  parameterType="com.gdu.voyage.vo.Activity">
		SELECT
			COUNT(*)
		FROM 
			activity
		<if test="hostNo != null">
			<where>
				host_no = #{hostNo}
				AND
				NOT activity_state_admin = "승인대기"
				AND
				NOT activity_state_admin = "삭제"
			</where>
		</if>
	</select>
	
	
    <!-- 체험번호에따른 체험 상세 목록 출력 One -->
    <select id="selectActivityOne" resultType="com.gdu.voyage.vo.Activity">
            SELECT 
            	activity_no as activityNo,
	            host_no as HostNo,
	            activity_name as activityName,
	            activity_open_date as activityOpenDate,
	            activity_close_date as activityCloseDate,
	            activity_price as activityPrice,
	            activity_open_hour as activityOpenHour,
	            activity_close_hour as activityCloseHour,
	            activity_max_t as activityMaxT,
	            activity_max_p as activityMaxP,
	            activity_description as activityDescription,
	            activity_state as activityState,
	            activity_state_admin as activityStateAdmin,
	            create_date as createDate,
	            update_date as updateDate
            FROM 
            	activity
            WHERE
           		activity_no = #{activity_no}
    </select>
    
    <!-- 등록된 체험 승인여부 수정 -->
    <update id="activityUpdate" parameterType="com.gdu.voyage.vo.Activity">
    	UPDATE activity SET
    		activity_state = #{activityState},
    		activity_state_admin = #{activityStateAdmin},
    		update_date = NOW()
    	WHERE activity_no = #{activityNo}
    </update>
    
    <!-- 승인완료된 체험을 불러옴 list -->
	<select id="selectAccessActivity" resultType="com.gdu.voyage.vo.Activity">
            SELECT 
	            activity_no as activityNo,
	            host_no as hostNo,
	            activity_name as activityName,
	            activity_open_date as activityOpenDate,
	            activity_close_date as activityCloseDate,
	            activity_description as activityDescription,
	            activity_state as activityState,
	            activity_state_admin as activityStateAdmin,
	            create_date as createDate,
	            update_date as updateDate
            FROM
            	activity
            WHERE
            	activity_state_admin = '승인완료'
    </select>
    
    <!-- 삭제 요청 처리. 마지막 체크인 날짜로부터 일주일이 되면 삭제 처리 -->
	<update id="updateDormantActivity">
		UPDATE activity
		SET
			activity_state_admin = "삭제"
		WHERE
			DATEDIFF(NOW(),update_date) >= 7
		AND
			activity_state_admin = "삭제대기"
	</update>
	
	<!-- 삭제 요청 버튼 클릭시 삭제 대기 처리 -->
	<update id="updateDeleteActivity">
		UPDATE activity
		SET
			activity_state_admin = "삭제대기"
		WHERE
			activity_state_admin = "승인완료"
		AND
			activity_no = #{activityNo}
	</update>
</mapper>